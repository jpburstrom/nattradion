var inPath = "../data/cellData.tsv".resolveRelative;
var outPath = "../celler/%*/cell.scd".resolveRelative;
var prefix = "\n//tsv\n";
var suffix = "\n//end tsv\n";
var findOld = { |string|
	var pos = string.findRegexp("(Cell\\({)(.*)");
	pos !? { |p| p[2][0] + [0, 1] }
};
var findNew = { |string|
	var pos = string.findRegexp("(%)(.*)(%)()".format(prefix, suffix));
	if (pos.notEmpty) {
		[pos[1][0] - 1, pos[4][0]]
	}
};
var writeToFile = { |path, content|

	var pos, file, out;
	var string = File.readAllString(path);

	path.postln; //string.postln;
	pos = findNew.(string) ?? { findOld.(string) };

	pos.postln;

	file = File(path, "w");
	file.write(
		string[..pos[0]]
		++ prefix
		++ content
		++ suffix
		++ string[pos[1]..]
	);
	file.close;

};
var findPath = { |numString|
	var path = outPath.format(numString).pathMatch[0];
	if (File.exists(path)) {
		path
	}
};



var printTemplate = { |obj|
	var template = 	(
	hasFriend:
		"hasFriend: (
		\tprob: %,
		\tfilter: \"%\",
		\tmodFunc: { |friend|
		\t}
	\t)",
	isFriend:
		"isFriend: (
		\tcount: %,
		\tmodFunc: { |count|
		\t}
	\t)",
	isBridge:
		"isBridge: (
		\tcount: %,
		\tmodFunc: { |count|
		\t};
	\t)",
	isOneshot:
		"isOneshot: (
		\tcount: %,
		\tmodFunc: { |count|
		\t};
	\t)"
);

	var transTemplate = { |obj|
		var out = List();
		obj.do { |k|
			out.add( "\\" ++ k);
		};
		out = "transitions: [" ++  out.join(", ") ++ "]";
	};

	var out = List();

	if (obj.friendProbability ? 0 > 0) {
		out.add(template.hasFriend.format(obj.friendProbability, obj.friendFilter ? ""))
	};

	if (obj.friends ? 0 > 0) {
		out.add(template.isFriend.format(obj.friends));
	};

	if (obj.bridges ? 0 > 0) {
		out.add(template.isBridge.format(obj.bridges));
	};

	if (obj.oneshots ? 0 > 0) {
		out.add(template.isOneshot.format(obj.oneshots));
	};

	if (obj.transitions.notNil) {
		out.add(transTemplate.(obj.transitions));
	};

	"\t~init = {
		~updateSettings.((
			%
		));
	};".format(out.join(",\n\t\t").replace("\n\t", "\n\t\t"))

};

{
	var orig = TabFileReader.read(inPath, true, false);
	var keys = orig[0].collect(_.asSymbol);
	var rows = orig[1..];
	var out = List();
	var outString, file;

	rows.do { |row|
		var dict = (), path;
		keys.do { |k, i|
			if (row[i].notNil and: { row[i].isEmpty.not }) {
				var val = row[i];
				if (#[friends, bridges, oneshots, friendProbability].includes(k)) {
					val = val.asFloat;
				};
				dict[k] = val;
			};
		};

		dict[\transitions] = [];

		#[fade, xfade, cut].do { |tr|
			var val = dict[tr];
			if (val.notNil) {
				dict[\transitions] = dict[\transitions].add(tr);
			};
			dict[tr] = nil;
		};
		if (dict[\transitions].isEmpty) {
			dict[\transitions] = [\cut]
		};

		if (dict[\transitions].includes(\cut)) {
			dict[\transitions] = dict[\transitions] ++ #[bridge, oneshot];
		};

		// out[row[0].asString.split(Char.space)[0].asSymbol] = dict
		path = findPath.(dict.name.split(Char.space)[0]);
		if (path.notNil) {
			writeToFile.(
				path,
				printTemplate.(dict)
			)
		}
	};


	/*
	outString = "//Cell data generated by sketchy script at tools/cellTSVReader.scd\n(\n";
	outString = outString ++ out.join(",\n") ++ "\n)\n//---EOF---";
	outString.postln;

	file = File(outPath, "w");
	file.write(outString);
	file.close;
	*/

}.value;


